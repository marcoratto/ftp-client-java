/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";
  IGNORE_CASE = true;
  DEBUG_PARSER = false;
  JAVA_UNICODE_ESCAPE = false;  static = false;}PARSER_BEGIN(FtpParser)
/*
 * Copyright (C) 2011 Marco Ratto
 *
 * This file is part of the project ftp-client-java.
 *
 * ftp-client-java is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * any later version.
 *
 * ftp-client-java is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ftp-client-java; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */package uk.co.marcoratto.ftp;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.util.Vector;
import java.util.Hashtable;
import java.util.StringTokenizer;

import org.apache.log4j.Logger;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.apache.commons.net.ftp.FTPFileFilter;
import org.apache.commons.net.ftp.FTPFile;

import uk.co.marcoratto.util.Utility;
import uk.co.marcoratto.net.ClientFTP;
import uk.co.marcoratto.net.ClientFTPException;

public class FtpParser {

  private final static int DEFAULT_PORT = 21;
  private final static Logger logger = Logger.getLogger("uk.co.marcoratto.ftp");
  
  private int debugLevel = 0;
  private boolean quoteControlCharacters = false;
  private boolean verbose = false;
  private boolean binary = false;
  private boolean hash = false;
  private boolean prompt = true;
  private boolean passive = false;
  
  private boolean autoLogin = true;
 
  private String hostname = null;
  private int port = -1;
  private File localDir = new File(".");
  private File remoteDir = null;
  
  private String username = null;
  private String password = null;
  private String account = null;
  
  private boolean connected = false;

  private ClientFTP clientFTP = null;

  private Vector<String> args = new Vector<String>(1);

  private final static Hashtable<String,String> commandHelp = new Hashtable<String,String>();

  static  {	commandHelp.put("mdir","list contents of multiple remote directories");
	commandHelp.put("$","execute macro");
	commandHelp.put("sendport","toggle use of PORT cmd for each data connection");
	commandHelp.put("site","send site specific command to remote server");
	commandHelp.put("account","send account command to remote server");
	commandHelp.put("append","append to a file");
	commandHelp.put("mls","list contents of multiple remote directories");
	commandHelp.put("status","show current status");
	commandHelp.put("form","set file transfer format");
	commandHelp.put("mode","set file transfer mode");
	commandHelp.put("struct","set file transfer structure");
	commandHelp.put("bell","beep when command completed");
	commandHelp.put("modtime","show last modification time of remote file");
	commandHelp.put("quote","send arbitrary ftp command");
	commandHelp.put("glob","toggle metacharacter expansion of local file names");	
	commandHelp.put("sunique","toggle store unique on remote machine");
	commandHelp.put("newer","get file if remote file is newer than local file ");
	commandHelp.put("reget","get file restarting at end of local file");
	commandHelp.put("tenex","set tenex file transfer type");
	commandHelp.put("case","toggle mget upper/lower case id mapping");
	commandHelp.put("nmap","set templates for default file name mapping");
	commandHelp.put("rstatus","show status of remote machine");
	commandHelp.put("tick","toggle printing byte counter during transfers");
	commandHelp.put("idle","get (set) idle timer on remote side");
	commandHelp.put("trace","toggle packet tracing");
	commandHelp.put("cdup","change remote working directory to parent directory");
	commandHelp.put("ntrans","set translation table for default file name mapping");
	commandHelp.put("chmod","change file permissions of remote file");
	commandHelp.put("reset","clear queued command replies");
	commandHelp.put("restart","restart file transfer at bytecount");
	commandHelp.put("umask","get (set) umask on remote side");
	commandHelp.put("cr","toggle carriage return stripping on ascii gets");
	commandHelp.put("macdef","define a macro");
	commandHelp.put("mdelete","delete multiple files");
	commandHelp.put("proxy","issue command on alternate connection");
	commandHelp.put("runique","toggle store unique for local files");
  }
  
  private String help = "!		debug		mdir		qc		send"
  				 + "\n"
				 + "$		dir		mget		sendport	site"
  				 + "\n"
  				 + "account		disconnect	mkdir		put		size"
  				 + "\n"
				 + "append		exit		mls		pwd		status"
  				 + "\n"
				 + "ascii		form		mode		quit		struct"
  				 + "\n"
				 + "bell		get		modtime		quote		system"
  				 + "\n"
				 + "binary		glob		mput		recv		sunique"
  				 + "\n"
				 + "bye		hash		newer		reget		tenex"
  				 + "\n"
				 + "case		help		nmap		rstatus		tick"
  				 + "\n"
				 + "cd		idle		nlist		rhelp		trace"
  				 + "\n"
				 + "cdup		image		ntrans		rename		type"
  				 + "\n"
				 + "chmod		lcd		open		reset		user"
  				 + "\n"
				 + "close		ls		prompt		restart		umask"
  				 + "\n"
				 + "cr		macdef		passive		rmdir		verbose"
  				 + "\n"
				 + "delete		mdelete		proxy		runique		?";

   
  public void setAutoLogin(boolean b) {
    this.autoLogin = b;  }
  
  public boolean getAutoLogin() {
    return this.autoLogin;
  }

  public void setPassive(boolean b) {
    this.passive = b;
  }
  
  public boolean getPassive() {
    return this.passive;
  }

  private void help(String cmd) {
	 String msg = "unknown";
	 if (commandHelp.containsKey(cmd)) {
		msg = commandHelp.get(cmd);
	 }	 
	System.out.println(cmd + "\t" + msg);  
  }

  private void help() {  
   System.out.println(help);  
  }

  private void dologout(int i){
    System.exit(i);
  }
  private void reply(int i, String s) {
    System.out.println(i + " " + s);
  }

  private void commandCD() {
     if (!connected) {
       System.out.println("Not connected.");
       return;
     }
     String directory = null;
     if (args.size() == 0) {
	    directory = Utility.input("(remote-directory):", "");
     } else {
       directory = args.get(0);
     }
     if ((directory == null) && directory.trim().length() != 0) {
       System.out.println("usage: cd remote-directory");
     } else{       
		try {
    		clientFTP.cwd(directory);
    		this.remoteDir = clientFTP.getRemoteDirectory();    		
		} catch (ClientFTPException e) {
		  logger.error(e.getMessage(), e);
		}
     }      }

  private void commandLCD() {
     if (args.size() > 0) {
         if (args.get(0).startsWith("/")) {			localDir = new File(args.get(0));		
         } else {
           localDir = new File(localDir, args.get(0));         }
    }    try {
		System.out.println("Local directory now " + localDir.getCanonicalPath());
	} catch (IOException e) {
	  logger.error(e.getMessage(), e);
 	}
	       
  }
  
  private void commandMKDIR() {
     if (!connected) {
       System.out.println("Not connected.");
       return;
     }
     String directory = null;
     if (args.size() == 0) {
	    directory = Utility.input("(directory-name):", "");
     } else {
       directory = args.get(0);
     }
     if ((directory == null) && directory.trim().length() != 0) {
       System.out.println("usage: mkdir directory-name");
     } else{       
		try {
    		clientFTP.mkdir(directory);    		
		} catch (ClientFTPException e) {
		  logger.error(e);
		}
     }    
  }

  private void commandRMDIR() {
     if (!connected) {
       System.out.println("Not connected.");
       return;
     }
     String directory = null;
     if (args.size() == 0) {
	    directory = Utility.input("(directory-name):", "");
     } else {
       directory = args.get(0);
     }
     if ((directory == null) && directory.trim().length() != 0) {
       System.out.println("usage: rmdir directory-name");
     } else{       
		try {
    		clientFTP.rmdir(directory);    		
		} catch (ClientFTPException e) {
		  logger.error(e.getMessage(), e);
		}
     }    
  }

  private void commandDELETE() {
     if (!connected) {
       System.out.println("Not connected.");
       return;
     }
     String remoteFile = null;
     if (args.size() == 0) {
	    remoteFile = Utility.input("(remote-file):", "");
     } else {
       remoteFile = args.get(0);
     }
     if ((remoteFile == null) && remoteFile.trim().length() != 0) {
       System.out.println("usage: delete remote-file");
     } else{       
		try {
    		clientFTP.deleteFile(remoteFile);    		
		} catch (ClientFTPException e) {
		  logger.error(e.getMessage(), e);
		}
     }    
  }

  private void commandRENAME() {
     if (!connected) {
       System.out.println("Not connected.");
       return;
     }
     String fromName = null;
     String toName = null;
     if (args.size() == 0) {
	    fromName = Utility.input("(from-name)", "");
	    toName = Utility.input("(to-name)", "");
     } else {
       fromName = args.get(0);
       toName = args.get(1);
     }
     if (((fromName == null) && fromName.trim().length() != 0) ||
         ((toName == null) && toName.trim().length() != 0)) {
       System.out.println("usage: rename from-name to-name");
     } else{       
		try {
    		clientFTP.rename(fromName, toName);    		
		} catch (ClientFTPException e) {
		  logger.error(e.getMessage(), e);
		}
     }    
  }

  private void commandPUT() {
     if (!connected) {
       System.out.println("Not connected.");
       return;
     }
     String localFileFilter = null;
     String localFile = null;
     String remoteFile = null;
     if (args.size() == 0) {
	    localFileFilter = Utility.input("(local-file):", "");
	    remoteFile = Utility.input("(remote-file):", "");
     } else if (args.size() == 1) {
       localFileFilter = args.get(0);
     } else {
       localFileFilter = args.get(0);
       remoteFile = args.get(1);
     }
     logger.info("localDir=" + this.localDir);
     logger.info("localFileFilter=" + localFileFilter);
 	 FileFilter fileFilter = new WildcardFileFilter(localFileFilter);
 	 File[] files = this.localDir.listFiles(fileFilter);
     logger.info("Found " + files.length + " files."); 	
 	 if (files.length == 0) {
 	   System.out.println("local: " + localFileFilter + ": No such file or directory");
 	   return; 	 }

	localFile = files[0].getName();

	if (remoteFile == null) {
	  remoteFile = localFile; 	}
     
     // localFile = Utility.concatenate(this.localDir, localFile);
     if (((localFile == null) && localFile.trim().length() != 0) ||
     	 ((remoteFile == null) && remoteFile.trim().length() != 0)) {
       System.out.println("usage: send local-file remote-file");
       return;
     }
     this.upload(localFile, remoteFile);
  }

  private void commandMPUT() {
     if (!connected) {
       System.out.println("Not connected.");
       return;
     }
     String localFiles = "";
     String remoteFile = null;
     if (args.size() == 0) {
	    localFiles = Utility.input("(local-files):", "");
     } else {
       String sep = "";
       for (int j=0; j<args.size(); j++) {		localFiles += sep + args.get(j);
		sep = " ";
       }        
     }
     logger.info("localFiles=" + localFiles);
     StringTokenizer st = new StringTokenizer(localFiles, " ");
     String localFileFilter = null;
     
     while (st.hasMoreElements()) {
    	 localFileFilter = (String) st.nextElement();
	     logger.info("localFileFilter=" + localFileFilter);
 	 	 FileFilter fileFilter = new WildcardFileFilter(localFileFilter);
 	 	 File[] files = this.localDir.listFiles(fileFilter);
     	 logger.info("Found " + files.length + " files.");
     	 for (int j=0; j<files.length; j++) {
     	   String localFile = files[j].getName();
     	   remoteFile = localFile;
     	   if (this.prompt) {				String yesOrNot = Utility.input("mput " + localFile + "?", "");
				if (!(yesOrNot.trim().equalsIgnoreCase("n")) && 
				   (!yesOrNot.trim().equalsIgnoreCase("no"))) {
		     	   this.upload(localFile, remoteFile);
				}
     	   } else {
     	       this.upload(localFile, remoteFile);     	   }
     	 } 	
 	 }
  }

  private void upload(String local, String remote) {
    local = Utility.concatenate(localDir, local);
    remote = Utility.concatenate(remoteDir, remote);
    
	    System.out.println("local: " + local + " remote: " + remote);
	    if (!Utility.checkFile(local)) {
	      System.out.println("local: " + local + ": No such file or directory");
	      return;
	    }
		try {
		    long startTime = System.currentTimeMillis();
    		clientFTP.upload(local, remote);
    		long endTime = System.currentTimeMillis();
    		long delay = endTime-startTime;

    		long fileSize = Utility.getFileSize(local);
			double average = fileSize / delay * 1000;      		
    		System.out.println(fileSize + " bytes sent in " + Utility.msToSecondss(delay) + " secs (" + Utility.formatDouble("0.0", average) + " kB/s)");
		} catch (ClientFTPException e) {
		  logger.error(e);
		}
  }

  private void commandGET() {
     if (!connected) {
       System.out.println("Not connected.");
       return;
     }
     String localFile = null;
     String remoteFile = null;
     if (args.size() == 0) {
	    remoteFile = Utility.input("(remote-file):", "");
	    localFile = Utility.input("(local-file):", "");
     } else if (args.size() == 1) {
       remoteFile = args.get(0);
     } else {
       remoteFile = args.get(0);
       localFile = args.get(1);
     }
     logger.info("localDir=" + this.localDir);
     logger.info("remoteDir=" + this.remoteDir);

	if (localFile == null) {
	  localFile = remoteFile; 
	}
     
     if (((localFile == null) || localFile.trim().length() == 0) ||
     	 ((remoteFile == null) || remoteFile.trim().length() == 0)) {
       System.out.println("usage: get remote-file [local-file]");
       return;
     }
     this.download(localFile, remoteFile);
  }
  
  private void download(String local, String remote) {
    local = Utility.concatenate(localDir, local);
    remote = Utility.concatenate(remoteDir, remote);
    
	    System.out.println("remote:" + remote + " local:" + local);
		try {
		    long startTime = System.currentTimeMillis();
    		boolean returnFlag = clientFTP.downloadFile(remote, local);
    		if (returnFlag) {	    		long endTime = System.currentTimeMillis();
	    		long delay = endTime-startTime;
	
	    		long fileSize = Utility.getFileSize(local);
				double average = fileSize / delay * 1000;      		
	    		System.out.println(fileSize + " bytes received in " + Utility.msToSecondss(delay) + " secs (" + Utility.formatDouble("0.0", average) + " kB/s)");
    		}
		} catch (ClientFTPException e) {
		  	logger.error(e.getMessage(), e);
		}
  }
    
    private void commandLS() {
     if (!connected) {
       System.out.println("Not connected.");
       return;
     }
     String directory = null;
     if (args.size() >= 1) {
       directory = args.get(0);
     }
	try {
		clientFTP.ls(directory);    		
	} catch (ClientFTPException e) {
	  logger.error(e);
	}
  }

    private void commandNLIST() {
     if (!connected) {
       System.out.println("Not connected.");
       return;
     }
     String directory = null;
     if (args.size() >= 1) {
       directory = args.get(0);
     }
	try {
		clientFTP.nlist(directory);    		
	} catch (ClientFTPException e) {
	  logger.error(e);
	}
  }

    private void commandMGET() {
     if (!connected) {
       System.out.println("Not connected.");
       return;
     }
     String directory = null;
     if (args.size() >= 1) {
       directory = args.get(0);
     } 
	try {
		FTPFile[] files = clientFTP.getRemoteFiles(directory);	
		for (int i = 0; i < files.length; i++) {
		  this.reply(150, "Opening " + Utility.translateBinary(this.binary) + " mode data connection for " + files[i].getName() + "(" + files[i].getSize()+ " bytes).");				
     	   if (this.prompt) {
				String yesOrNot = Utility.input("mget " + files[i].getName() + "?", "");
				if (!(yesOrNot.trim().equalsIgnoreCase("n")) && 
				   (!yesOrNot.trim().equalsIgnoreCase("no"))) {
				   this.download(files[i].getName(), files[i].getName());
				}
     	   } else {
			   this.download(files[i].getName(), files[i].getName());
     	   }
		   
		}		    		
	} catch (ClientFTPException e) {
	  logger.error(e);
	}
  }

  private void commandSIZE() {
     if (!connected) {
       System.out.println("Not connected.");
       return;
     }
     String filename = null;
     if (args.size() == 0) {
       filename = Utility.input("(remote-file):", "");
   	 } else {
       filename = args.get(0);
     }
     
     if ((filename == null) || (filename.trim().length() == 0)) {
       System.out.println("usage: size filename");
       return;
     }
	try {
		long l = clientFTP.size(Utility.concatenate(remoteDir, filename));
		if (l == -1) {
		  reply(550, "Could not get file size.");		  		} else {
		  reply(213, Long.toString(l));		}
	} catch (ClientFTPException e) {
	  logger.error(e);
	}
  }

  private void commandPWD() {
     if (!connected) {
       System.out.println("Not connected!");
       return;
     }
	try {
		clientFTP.pwd();    		
	} catch (ClientFTPException e) {
	  logger.error(e);
	}      }

  private void commandCLOSE() {
     if (!connected) {
       System.out.println("Not connected.");
       return;
     }
		try {
			clientFTP.disconnect();    		
		} catch (ClientFTPException e) {
		  logger.error(e);
		}
		clientFTP = null;
		connected = false;      }

  private void commandRHELP() {     if (!connected) {
       System.out.println("Not connected.");
       return;
     }
	try {
		clientFTP.rhelp();    		
	} catch (ClientFTPException e) {
	  logger.error(e);
	}
  }

  private void commandUSER() {
	username = null;
	password = null;
	account = null;
	switch (args.size()) {
	case 3:		
		username = args.get(0);
		password = args.get(1);
		account = args.get(2);
		break;
	case 2:
		username = args.get(0);
		password = args.get(1);
		break;
	case 1:
	    username = args.get(0);
		break;
	case 0:		
		username = Utility.input("(username)", (String) null);
		break;

	default:
		break;
	}

    if ((username == null) || (username.trim().length() == 0)) {
    	  System.out.println("usage: user username [password] [account]");
    }
      }

  private void commandTYPE() {
     if (!connected) {
       System.out.println("Not connected!");
       return;
     }
     if (binary) {
       System.out.println("Using binary mode to transfer files.");
     } else {
       System.out.println("Using ascii mode to transfer files.");
     }      }

  private void commandHELP(String s) {
	logger.info("HELP:" + s);
    if (s != null) {
      System.out.println(s);
    } else {
      System.out.println("unknown.");
    }      }

  private void commandQUIT() {
	logger.info("QUIT");
    if (connected) {
		reply(221, "Goodbye.");
	}
    dologout(0);      }

  private void commandPASSIVE() {
     if (!connected) {
       System.out.println("Not connected!");
       return;
     }     
     passive = !passive;
     clientFTP.setPassiveMode(passive);
     System.out.println("Passive mode " + Utility.translateBooleanToOnOff(passive) + ".");      }

  private void commandPROMPT() {
     prompt = !prompt;
     System.out.println("Interactive mode " + Utility.translateBooleanToOnOff(prompt) + ".");      }

  private void commandHASH() {
     hash = !hash;
     System.out.println("Hash mark printing " + Utility.translateBooleanToOnOff(hash) +
     				    (hash ? " (1024 bytes/hash mark)." : "."));      }

  private void commandBINARY() {
     if (!connected) {
       System.out.println("Not connected!");
       return;
     }     
	try {  
     clientFTP.setFileTypeBINARY();
     binary = true;
	} catch (ClientFTPException e) {
	  logger.error(e.getMessage(), e);
	}
  }

  private void commandASCII() {
     if (!connected) {
       System.out.println("Not connected!");
       return;
     }
     try {       
     	clientFTP.setFileTypeASCII();
	    binary = false;
  	 } catch (ClientFTPException e) {
	  	logger.error(e.getMessage(), e);
	 }     
  }

  private void commandVERBOSE() {
     verbose = !verbose;
     System.out.println("Verbose mode " + Utility.translateBooleanToOnOff(verbose) + ".");      }

  private void commandDEBUG() {
     int i = -1;
     if (args.size() >= 1) {
       i = Utility.stringToIntegerValue(args.get(0), -1);        
    }
    if (i == -1) {
      System.out.println(args.get(0) + ": bad debugging value.");
      return;
  	}    
    debugLevel = i;
    System.out.println("Debugging " + Utility.translateIntegerValueToOnOff(debugLevel) + "(debug=" + debugLevel + ").");          }
  
  private void commandOPEN() {
     if (connected) {
       System.out.println("Already connected to " + this.hostname + ", use close first.");
       return;     }
     logger.debug("args.size()=" + args.size());
     if (args.size() == 0) {
       this.hostname = Utility.input("(to)", "");
       this.port = DEFAULT_PORT;
     } else if (args.size() == 1) {       
       this.hostname = args.get(0);
       this.port = DEFAULT_PORT;       
     } else if (args.size() >= 2) {       
       this.hostname = args.get(0);       
	   this.port = Utility.stringToIntegerValue(args.get(1), -1);        
     } else {
     	System.out.println("usage: open host-name [port]");
     	return;
     }
	 if (this.port == -1) {
	    System.out.println(args.get(1) + ": bad debugging value.");
	 }
     if ((hostname==null) ||
         (hostname.trim().length() == 0) ||
         (this.port == -1)) {
    	  System.out.println("usage: open host-name [port]");
    	  return;
     }

     if (Utility.checkHostname(this.hostname) == false) {
       System.out.println("ftp: " + this.hostname + ": Unknown host");
       return;     }
       
    	clientFTP = new ClientFTP();
		try {
    		clientFTP.connect(hostname, port);
	        System.out.println("Connected to " + hostname);
	        clientFTP.printReplyStrings();

	        if (autoLogin) {
				username = Utility.getDefaultUser();
	    		username = Utility.input("Name (" + hostname + ":" + username + "):", username);
	    		password = Utility.input("Password:", "");
	    		clientFTP.login(username, password, account);
	        }

	        this.remoteDir = clientFTP.getRemoteDirectory();
	        logger.info("remoteDir=" + this.remoteDir);
	        
    		connected = true;  		
		} catch (ClientFTPException e) {
		  logger.error(e.getMessage(), e);
		}       
       }

}PARSER_END(FtpParser)SKIP :{	"\r"	| "\t"}TOKEN : /* OPERATORS */{  	< SPACE: " " >
	  | < CRLF : "\n" >
      | < HELP : "HELP" | "HEL" | "HE" | "?" >
      | < BANG : "!" >
      | < CD : "CD" >
      | < LCD : "LCD" >
      | < LS : "LS" | "DIR" >
	  | < QC: "QC" >
      | < QUIT : "QUIT" | "QUI" | "BYE" | "EXIT" | "EXI" | "EX" | "DISCONNECT" | "DISCONNEC" | "DISCONNE" | "DISCONN" | "DISCO" | "DISC">
      | < MKDIR : "MKDIR" | "MKDI" | "MKD" | "MK">
      | < RMDIR : "RMDIR" | "RMDI" | "RMD" | "RM" >
      | < PUT : "SEND" | "PUT" >
      | < DELETE : "DELETE" | "DELET" | "DELE" | "DEL" >
      | < MPUT : "MPUT" | "MPU" | "MP" >
      | < GET : "GET" | "GE" | "RECV" | "REC" >
      | < MGET : "MGET" | "MGE" | "MG" >
      | < RENAME : "RENAME" | "RENAM" | "RENA" | "REN" >
      | < SIZE : "SIZE" | "SIZ" >
      | < NLIST : "NLIST" | "NLIS" | "NLI" | "NL" >
	  | < USER : "USER" | "USE" | "US" > 
	  | < PASSIVE : "PASSIVE" | "PASSIV" | "PASSI" | "PASS" | "PAS" | "PA" >
	  | < PROMPT : "PROMPT" | "PROMP" | "PROM" >
	  | < HASH : "HASH" | "HAS" | "HA" >
	  | < BINARY : "BINARY" | "BINAR" | "BINA" | "BIN" | "BI" | "IMAGE" | "IMAG" | "IMA" | "IM" >
	  | < ASCII : "ASCII" | "ASCI" | "ASC" | "AS" >
	  | < VERBOSE : "VERBOSE" | "VERBOS" | "VERBO" | "VERB" | "VER" | "VE" | "V" >
	  | < DEBUG: "DEBUG" | "DEBU" | "DEB" >
	  | < OPEN: "OPEN" | "OPE" | "OP" | "O" >
	  | < CLOSE: "CLOSE" | "CLOS" | "CLO" | "CL" >
	  | < TYPE: "TYPE" | "TYP" |"TY" >
	  | < PWD: "PWD" | "PW" >
	  | < RHELP : "RHELP" | "RHEL" | "RHE" >
	  | < SYSTEM: "SYSTEM" | "SYSTE" | "SYST" | "SYST" | "SYS" | "SY" >
	  | < RNFR : "RNFR" >
	  | < STRING : ([ "A"-"Z", "a"-"z" , "0"-"9", "-", "_", "/", ".", "*", "?", "@"])+ >   
}
void cmd_list() :{}{
	(< SPACE >)* cmd() (< SPACE >)* < CRLF >   
    {            
    }
	| rcmd() ";"
}

void cmd() :
{
  int tmpIntegerValue = 0;
  String a = null;    
  args = new Vector<String>(1); }	{
	<CRLF> 
	| LOOKAHEAD( 2 ) <USER> (< SPACE >)+ argList()  
    {
        this.commandUSER();
    }
	| <USER> 
    {
        this.commandUSER();
    }
    | LOOKAHEAD( 2 ) < HELP > (< SPACE >)+ a=tokenCommand()
    {
      	this.commandHELP(a);
    }
    | 
    < HELP > 
    {
		logger.info("HELP");
        help();
    }
    | < QUIT > 
	{
	  this.commandQUIT();
    }
    | LOOKAHEAD( 2 ) < LCD > (< SPACE >)+ argList()
    {
      this.commandLCD();
     }
   | < LCD > 
    {
      this.commandLCD();
     }
   | LOOKAHEAD( 2 ) < BANG > (< SPACE >)* argList()
   {
     Utility.exec(args.get(0));
   }
   | < BANG > 
   {
     Utility.execShell();
   }
   | < PASSIVE > 
   {
     this.commandPASSIVE();
   }        
   | < PROMPT >
   {
     this.commandPROMPT();
   }        
   | < HASH >
   {
     this.commandHASH();
   }
   | < BINARY >
   {
     this.commandBINARY();
   }
   | < ASCII >
   {
     this.commandASCII();
   }
   | < TYPE >
   {
     this.commandTYPE();
   }
   | < VERBOSE >
   {
     this.commandVERBOSE();
   }        
   | < QC >
   {
     quoteControlCharacters = !quoteControlCharacters;
     System.out.println("Quote control characters " + Utility.translateBooleanToOnOff(quoteControlCharacters) + ".");
   }
   | LOOKAHEAD( 2 ) < DEBUG > (< SPACE >)+ argList()
   {
     this.commandDEBUG();
   }        
   | < DEBUG > 
   {
     debugLevel=1;
     System.out.println("Debugging " + Utility.translateIntegerValueToOnOff(debugLevel) + "(debug=" + debugLevel + ").");
   }        
   | LOOKAHEAD( 2 ) < OPEN > (< SPACE >)+ argList()
   {
     this.commandOPEN();
   }
   | < OPEN >
   {     this.commandOPEN();
   } 
   | < CLOSE >
   {
     this.commandCLOSE();
   }
   | < PWD >
   {
     this.commandPWD();
   }
   | LOOKAHEAD( 2 ) < CD > (< SPACE >)* argList()
   {
     this.commandCD();
   }
   | < CD > 
   {
     this.commandCD();
   }
   | LOOKAHEAD( 2 ) < MKDIR > (< SPACE >)* argList()
   {
     this.commandMKDIR();
   }
   | < MKDIR > 
   {
     this.commandMKDIR();
   }
   | LOOKAHEAD( 2 ) < RMDIR > (< SPACE >)* argList()
   {
     this.commandRMDIR();
   }
   | < RMDIR > 
   {
     this.commandRMDIR();
   }
   | LOOKAHEAD( 2 ) < DELETE > (< SPACE >)* argList()
   {
     this.commandDELETE();
   }
   | < DELETE > 
   {
     this.commandDELETE();
   }
   | LOOKAHEAD( 2 ) < RENAME > (< SPACE >)* argList()
   {
     this.commandRENAME();
   }
   | < RENAME > 
   {
     this.commandRENAME();
   }
   | LOOKAHEAD( 2 ) < LS > (< SPACE >)* argList()
   {
     this.commandLS();
   }
   | < LS > 
   {
     this.commandLS();
   }
   | LOOKAHEAD( 2 ) < NLIST > (< SPACE >)* argList()
   {
     this.commandNLIST();
   }
   | < NLIST > 
   {
     this.commandNLIST();
   }
   | LOOKAHEAD( 2 ) < PUT > (< SPACE >)* argList()
   {
     this.commandPUT();
   }
   | < PUT > 
   {
     this.commandPUT();
   }
   | LOOKAHEAD( 2 ) < MPUT > (< SPACE >)* argList()
   {
     this.commandMPUT();
   }
   | < MPUT > 
   {
     this.commandMPUT();
   }
   | LOOKAHEAD( 2 ) < GET > (< SPACE >)* argList()
   {
     this.commandGET();
   }
   | < GET > 
   {
     this.commandGET();
   }
   | LOOKAHEAD( 2 ) < MGET > (< SPACE >)* argList()
   {
     this.commandMGET();
   }
   | < MGET > 
   {
     this.commandMGET();
   }
   | LOOKAHEAD( 2 ) < SIZE > (< SPACE >)* argList()
   {
     this.commandSIZE();
   }
   | < SIZE > 
   {
     this.commandSIZE();
   }
   | < RHELP > 
   {
     this.commandRHELP();
   }
   | < SYSTEM >
   {
     if (!connected) {
       System.out.println("Not connected!");
       return;
     }
		try {
    		clientFTP.system();    		
		} catch (ClientFTPException e) {
		  logger.error(e);
		}
   }
}

void rcmd() :
{}
{             <RNFR> (< SPACE >)* argList() 
                {					
                }                
}       


String tokenCommand() :
{
  Token t = null;
}
{
	  t=< HELP >
	{
		return t.toString().trim() + "\tprint local help information"; 
	}
	  | t=< USER >
	{
		return t.toString().trim() + "\tsend new user information"; 
	}
	  | t=< QUIT >
	{
		return t.toString().trim() + "\tterminate ftp session and exit"; 
	}
	  | t=< LCD >
	{
		return t.toString().trim() + "\tchange local working directory"; 
	}
	  | t=< BANG >
	{
		return t.toString().trim() + "\tescape to the shell"; 
	}
	| t=< PASSIVE >
	{
		return t.toString().trim() + "\tenter passive transfer mode"; 
	}
	| t=< PROMPT >
	{
		return t.toString().trim() + "\tforce interactive prompting on multiple commands"; 
	}
	| t=< HASH >
	{
		return t.toString().trim() + "\ttoggle printing '#' for each buffer transferred"; 
	}
	| t=< BINARY>
	{
		return t.toString().trim() + "\tset binary transfer type"; 
	}
	| t=< ASCII>
	{
		return t.toString().trim() + "\tset ascii transfer type"; 
	}
	| t=< VERBOSE>
	{
		return t.toString().trim() + "\ttoggle verbose mode"; 
	}
	| t=< QC >
	{
		return t.toString().trim() + "\tprint ? in place of control characters on stdout"; 
	}
	| t=< DEBUG >
	{
	  return t.toString().trim() + "\ttoggle/set debugging mode";
	}
	| t=< OPEN >
	{
	  return t.toString().trim() + "\tconnect to remote ftp";
	}
	| t=< CLOSE >
	{
	 return t.toString().trim() + "\tterminate ftp session";
	}
	| t=< TYPE >
	{
	  return t.toString().trim() + "\tset file transfer type";	}
	| t=< PWD >
	{
	  return t.toString().trim() + "\tprint working directory on remote machine";
	}
	| t=< SYSTEM >
	{
	  return t.toString().trim() + "\tshow remote system type";
	}
	| t=< CD >
	{
	  return t.toString().trim() + "\tchange remote working directory";
	}
	| t=< MKDIR >
	{
	  return t.toString().trim() + "\tmake directory on the remote machine";
	}
	| t=< RMDIR >
	{
	  return t.toString().trim() + "\tremove directory on the remote machine";
	}
	| t=< LS >
	{
	  return t.toString().trim() + "\tlist contents of remote directory";
	}
	| t=< PUT >
	{
	  return t.toString().trim() + "\tsend one file";
	}
	| t=< MPUT >
	{
	  return t.toString().trim() + "\tsend multiple files";
	}
	| t=< DELETE >
	{
	  return t.toString().trim() + "\tdelete remote file";
	}
	| t=< RENAME >
	{
	  return t.toString().trim() + "\trename file";
	}
	| t=< RHELP >
	{
	  return t.toString().trim() + "\tget help from remote server";
	}
	| t=< NLIST >
	{
	  return t.toString().trim() + "\tnlist contents of remote directory";
	}
	| t=< GET >
	{
	  return t.toString().trim() + "\tnreceive file";
	}
	| t=< SIZE >
	{
	  return t.toString().trim() + "\tshow size of remote file";
	}
	| t=< MGET >
	{
	  return t.toString().trim() + "\tget multiple files";
	}
}

void argList() :
{
  args = new Vector<String>(1);
  }
{
   arg() (LOOKAHEAD(2) (< SPACE >)+ arg())*
}

void arg() :
{  Token t = null;
}
{
  t=<STRING>
{
  args.add(t.toString().trim());}   
}
